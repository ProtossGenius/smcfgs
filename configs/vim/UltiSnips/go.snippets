snippet /^meth/ "Method" r
// ${1:method_name} ${2:comments}.
func (${3:receiver} ${4:type}) $1(${4:params})${5/(.+)/ /}${5:returns} {
	${0:${VISUAL}}
}
endsnippet

snippet func "Function" b
// ${1:func_name} ${2:comments}.
func $1(${3:params})${4/(.+)/ /}${4:returns} {
	${0:${VISUAL}}
}
endsnippet

snippet hfunc "HTTPFunction" b
// ${1:func_name} ${2:comments}.
// @SMIST httpRegister(base + "/$1", package + "$1")
func $1(w http.ResponseWriter, r *http.Request) (interface{}, error){
	${0:${VISUAL}}
}
endsnippet


snippet check "check" b
func ${1:check}(err error){
	if err != nil{
		panic(err)
	}
}
endsnippet

snippet fdef "func def" b
// $1 ${4:comments}.
${1:name}(${2:params})${3/(.+)/ /}${3:returns}

endsnippet

snippet vdef "var def" b
// $1 ${3:comments}.
${1:VarName} ${2:VarType}

endsnippet
# Snippets for Go


snippet /^pkg/ "Package declaration" r
// Package $1 provides ProtossGenius.
package ${1:main}
endsnippet

# Mostly converted from: https://github.com/AlanQuatermain/go-tmbundle
snippet /^cons/ "Constants declaration" r
const (
		// ${1:constant} ${2:comments}.
		$1 ${3/(.+)/ /}${3:type} = ${4:value}
		${0}
	  )
endsnippet

snippet iota "Iota constant generator" b
const (
		// ${1:constant} ${2}.
		$1 ${3/(.+)/ /}${3:constan_type} = iota
		${0}
	  )
endsnippet

snippet struct "Struct declaration" b
// ${1:Struct} ${2:comments}.
type $1 struct {
	${0:${VISUAL}}
}
endsnippet

snippet interface "Interface declaration" b
// ${1:Interface} ${2:comments}.
type $1 interface {
	${0:${VISUAL}}
}
endsnippet

snippet if "If statement" b
if ${1:condition}${1/(.+)/ /}{
	${0:${VISUAL}}
}
endsnippet

snippet switch "Switch statement" b
switch ${1:expression}${1/(.+)/ /}{
	case$0
}
endsnippet

# functions
snippet /^main/ "Main function" r
func main() {
	${0:${VISUAL}}
}
endsnippet

snippet funch "HTTP handler" b
func ${1:handler}(${2:w} http.ResponseWriter, ${3:r} *http.Request) {
	${0:${VISUAL}}
}
endsnippet

# types and variables
snippet map "Map type" b
map[${1:keytype}]${2:valtype}
endsnippet

snippet : "Variable declaration :=" b
${1:name} := ${0:value}
endsnippet

snippet var "Variable declaration" b
var ${1:name}${2/(.+)/ /}${2:type}${3: = ${0:value}}
endsnippet

snippet vars "Variables declaration" b
var (
		${1:name}${2/(.+)/ /}${2:type}${3: = ${0:value} }
	)
	endsnippet

	snippet json "JSON field"
	\`json:"${1:displayName}"\`
	endsnippet


	snippet err "Basic error handling" b
	if err != nil {
		log.${1:Fatal}(err)
	}
endsnippet

snippet errp "error panic" b
if err != nil{
	panic(err)
}
endsnippet

